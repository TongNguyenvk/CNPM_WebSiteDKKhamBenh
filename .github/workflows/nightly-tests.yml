name: 🌙 Nightly Tests

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '18'

jobs:
  # ==================== COMPREHENSIVE TESTING ====================
  
  full-test-suite:
    name: 🧪 Full Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🧪 Frontend tests
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint
          npm run build

      - name: 🧪 Backend tests
        working-directory: ./backend
        run: |
          npm ci
          npm test
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: test_db
          DB_USERNAME: root
          DB_PASSWORD: root

  # ==================== PERFORMANCE TESTING ====================
  
  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: ⚡ Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ==================== SECURITY AUDIT ====================
  
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run comprehensive security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'

      - name: 📊 Process security results
        run: |
          if [ -f trivy-results.json ]; then
            echo "📊 Security scan results:"
            cat trivy-results.json | jq '.Results[] | select(.Vulnerabilities) | .Vulnerabilities | length' | awk '{sum+=$1} END {print "Total vulnerabilities found: " sum}'
          fi

      - name: 🔍 Check for secrets
        run: |
          echo "🔍 Scanning for secrets in codebase..."
          # Install truffleHog or similar tool
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest filesystem /pwd --json > secrets-scan.json
          
          if [ -s secrets-scan.json ]; then
            echo "⚠️ Potential secrets found!"
            cat secrets-scan.json
          else
            echo "✅ No secrets detected"
          fi

  # ==================== DEPENDENCY ANALYSIS ====================
  
  dependency-analysis:
    name: 📦 Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Analyze frontend dependencies
        working-directory: ./frontend
        run: |
          npm ci
          echo "📊 Frontend dependency analysis:"
          npm ls --depth=0
          npm audit --json > frontend-audit.json
          
          echo "🔍 Checking for outdated packages:"
          npm outdated --json > frontend-outdated.json || true

      - name: 🔍 Analyze backend dependencies
        working-directory: ./backend
        run: |
          npm ci
          echo "📊 Backend dependency analysis:"
          npm ls --depth=0
          npm audit --json > backend-audit.json
          
          echo "🔍 Checking for outdated packages:"
          npm outdated --json > backend-outdated.json || true

      - name: 📊 Generate dependency report
        run: |
          echo "# 📦 Dependency Report" > dependency-report.md
          echo "Generated on: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          
          echo "## Frontend Dependencies" >> dependency-report.md
          if [ -f frontend/frontend-audit.json ]; then
            echo "### Security Audit" >> dependency-report.md
            cat frontend/frontend-audit.json | jq -r '.metadata | "- Total dependencies: \(.totalDependencies)\n- Vulnerabilities: \(.vulnerabilities.total)"' >> dependency-report.md
          fi
          
          echo "## Backend Dependencies" >> dependency-report.md
          if [ -f backend/backend-audit.json ]; then
            echo "### Security Audit" >> dependency-report.md
            cat backend/backend-audit.json | jq -r '.metadata | "- Total dependencies: \(.totalDependencies)\n- Vulnerabilities: \(.vulnerabilities.total)"' >> dependency-report.md
          fi

      - name: 📊 Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-report.md

  # ==================== DOCKER IMAGE ANALYSIS ====================
  
  docker-analysis:
    name: 🐳 Docker Image Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🧱 Build images for analysis
        run: |
          docker build -t test-frontend:latest ./frontend
          docker build -t test-backend:latest ./backend

      - name: 🔍 Analyze image sizes
        run: |
          echo "📊 Docker image sizes:"
          docker images | grep test-
          
          echo "🔍 Frontend image layers:"
          docker history test-frontend:latest
          
          echo "🔍 Backend image layers:"
          docker history test-backend:latest

      - name: 🔒 Scan images for vulnerabilities
        run: |
          echo "🔍 Scanning frontend image..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image test-frontend:latest
          
          echo "🔍 Scanning backend image..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image test-backend:latest

  # ==================== NOTIFICATION ====================
  
  nightly-summary:
    name: 📊 Nightly Summary
    runs-on: ubuntu-latest
    needs: [full-test-suite, performance-test, security-audit, dependency-analysis, docker-analysis]
    if: always()
    
    steps:
      - name: 📊 Generate nightly report
        run: |
          echo "# 🌙 Nightly Test Report" > nightly-report.md
          echo "Date: $(date)" >> nightly-report.md
          echo "" >> nightly-report.md
          
          echo "## Test Results" >> nightly-report.md
          echo "- Full Test Suite: ${{ needs.full-test-suite.result }}" >> nightly-report.md
          echo "- Performance Test: ${{ needs.performance-test.result }}" >> nightly-report.md
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> nightly-report.md
          echo "- Dependency Analysis: ${{ needs.dependency-analysis.result }}" >> nightly-report.md
          echo "- Docker Analysis: ${{ needs.docker-analysis.result }}" >> nightly-report.md
          
          cat nightly-report.md

      - name: 📊 Upload nightly report
        uses: actions/upload-artifact@v4
        with:
          name: nightly-report
          path: nightly-report.md
