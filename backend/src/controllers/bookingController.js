const db = require("../models"); // Import to√†n b·ªô models
//const { Booking } = db;
const { Op } = require("sequelize");

// üè• 1. T·∫°o l·ªãch ƒë·∫∑t kh√°m m·ªõi
exports.createBooking = async (req, res) => {
    try {
        const { statusId, doctorId, patientId, date, timeType } = req.body;

        // T·∫°o m√£ token (UUID) cho booking
        const token = require("crypto").randomUUID();

        const newBooking = await db.Booking.create({
            statusId,
            doctorId,
            patientId,
            date,
            timeType,
            token,
        });

        res.status(201).json({ success: true, data: newBooking });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error });
    }
};

// üîç 2. L·∫•y danh s√°ch l·ªãch kh√°m theo b√°c sƒ©
exports.getBookingsByDoctor = async (req, res) => {
    try {
        const { doctorId } = req.params;

        const bookings = await db.Booking.findAll({
            where: { doctorId },
            include: [
                {
                    model: db.User,
                    as: 'doctorData',
                    attributes: ['id', 'firstName', 'lastName', 'email', 'address', 'gender', 'phoneNumber', 'image'],
                    include: [
                        {
                            model: db.DoctorDetail,
                            as: 'doctorDetail',
                            attributes: ['descriptionMarkdown', 'descriptionHTML']
                        },
                        {
                            model: db.Specialty,
                            as: 'specialtyData',
                            attributes: ['id', 'name', 'image', 'description']
                        },
                        {
                            model: db.Allcode,
                            as: 'roleData',
                            attributes: ['keyMap', 'valueVi', 'valueEn']
                        },
                        {
                            model: db.Allcode,
                            as: 'positionData',
                            attributes: ['keyMap', 'valueVi', 'valueEn']
                        }
                    ]
                },
                {
                    model: db.User,
                    as: 'patientData',
                    attributes: ['id', 'firstName', 'lastName', 'email', 'address', 'gender', 'phoneNumber', 'image']
                },
                {
                    model: db.Allcode,
                    as: 'statusData',
                    attributes: ['keyMap', 'valueVi', 'valueEn']
                },
                {
                    model: db.Allcode,
                    as: 'timeTypeData',
                    attributes: ['keyMap', 'valueVi', 'valueEn']
                }
            ],
            order: [["date", "ASC"]],
        });

        res.status(200).json({ success: true, data: bookings });
    } catch (error) {
        console.error('Error in getBookingsByDoctor:', error);
        res.status(500).json({
            success: false,
            message: "L·ªói server",
            error: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
};

// üè• 3. L·∫•y danh s√°ch l·ªãch kh√°m theo b·ªánh nh√¢n
exports.getBookingsByPatient = async (req, res) => {
    try {
        const patientId = parseInt(req.params.patientId, 10);
        console.log('Patient ID nh·∫≠n ƒë∆∞·ª£c:', patientId);

        if (isNaN(patientId) || patientId <= 0) {
            return res.status(400).json({ success: false, message: 'Patient ID kh√¥ng h·ª£p l·ªá' });
        }

        const bookings = await db.Booking.findAll({
            where: { patientId: patientId },
            include: [
                {
                    model: db.User,
                    as: 'patientData',
                    attributes: ['id', 'firstName', 'lastName', 'email', 'address', 'gender', 'phoneNumber', 'image']
                },
                {
                    model: db.User,
                    as: 'doctorData',
                    attributes: ['id', 'firstName', 'lastName', 'email', 'address', 'gender', 'phoneNumber', 'image'],
                    include: [
                        {
                            model: db.DoctorDetail,
                            as: 'doctorDetail',
                            attributes: ['descriptionMarkdown', 'descriptionHTML']
                        },
                        {
                            model: db.Specialty,
                            as: 'specialtyData',
                            attributes: ['id', 'name', 'image', 'description']
                        },
                        {
                            model: db.Allcode,
                            as: 'roleData',
                            attributes: ['keyMap', 'valueVi', 'valueEn']
                        },
                        {
                            model: db.Allcode,
                            as: 'positionData',
                            attributes: ['keyMap', 'valueVi', 'valueEn']
                        }
                    ]
                },
                {
                    model: db.Allcode,
                    as: 'statusData',
                    attributes: ['keyMap', 'valueVi', 'valueEn']
                },
                {
                    model: db.Allcode,
                    as: 'timeTypeData',
                    attributes: ['keyMap', 'valueVi', 'valueEn']
                }
            ],
            order: [['date', 'ASC']],
        });

        if (!bookings || bookings.length === 0) {
            return res.status(200).json({
                success: true,
                data: [],
                message: 'Kh√¥ng c√≥ ƒë·∫∑t l·ªãch n√†o cho b·ªánh nh√¢n n√†y',
            });
        }

        res.status(200).json({ success: true, data: bookings });
    } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t l·ªãch:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server',
            error: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
};

// ‚ùå 4. H·ªßy l·ªãch kh√°m (B√°c sƒ© ho·∫∑c b·ªánh nh√¢n c√≥ th·ªÉ h·ªßy)
exports.cancelBooking = async (req, res) => {
    try {
        const { id } = req.params;

        const booking = await db.Booking.findByPk(id);
        if (!booking) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m" });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "ƒê√£ h·ªßy" (mapping v·ªõi `S2` trong b·∫£ng allcode)
        booking.statusId = "S3";
        await booking.save();

        res.status(200).json({ success: true, message: "H·ªßy l·ªãch th√†nh c√¥ng", data: booking });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error });
    }
};

// üóë 5. X√≥a l·ªãch ƒë√£ h·ªßy sau 1 tu·∫ßn
exports.deleteOldCancelledBookings = async (req, res) => {
    try {
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7); // L·∫•y th·ªùi gian c√°ch ƒë√¢y 7 ng√†y

        const deleted = await db.Booking.destroy({
            where: {
                statusId: "S2",
                updatedAt: { [Op.lt]: oneWeekAgo },
            },
        });

        res.status(200).json({ success: true, message: `ƒê√£ x√≥a ${deleted} l·ªãch ƒë√£ h·ªßy qu√° 1 tu·∫ßn` });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error });
    }
};

// L·∫•y chi ti·∫øt l·ªãch kh√°m theo id
exports.getBookingById = async (req, res) => {
    try {
        const { id } = req.params;
        if (!id) {
            return res.status(400).json({ success: false, message: 'Thi·∫øu id l·ªãch kh√°m' });
        }
        const booking = await db.Booking.findByPk(id, {
            include: [
                {
                    model: db.User,
                    as: 'patientData',
                    attributes: ['id', 'firstName', 'lastName', 'email', 'address', 'gender', 'phoneNumber', 'image']
                },
                {
                    model: db.User,
                    as: 'doctorData',
                    attributes: ['id', 'firstName', 'lastName', 'email', 'address', 'gender', 'phoneNumber', 'image'],
                    include: [
                        {
                            model: db.DoctorDetail,
                            as: 'doctorDetail',
                            attributes: ['descriptionMarkdown', 'descriptionHTML']
                        },
                        {
                            model: db.Specialty,
                            as: 'specialtyData',
                            attributes: ['id', 'name', 'image', 'description']
                        },
                        {
                            model: db.Allcode,
                            as: 'roleData',
                            attributes: ['keyMap', 'valueVi', 'valueEn']
                        },
                        {
                            model: db.Allcode,
                            as: 'positionData',
                            attributes: ['keyMap', 'valueVi', 'valueEn']
                        }
                    ]
                },
                {
                    model: db.Allcode,
                    as: 'statusData',
                    attributes: ['keyMap', 'valueVi', 'valueEn']
                },
                {
                    model: db.Allcode,
                    as: 'timeTypeData',
                    attributes: ['keyMap', 'valueVi', 'valueEn']
                }
            ]
        });
        if (!booking) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m' });
        }
        res.status(200).json({ success: true, data: booking });
    } catch (error) {
        res.status(500).json({ success: false, message: 'L·ªói server', error: error.message });
    }
};

exports.updateBookingStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const { statusId } = req.body;
        const booking = await db.Booking.findByPk(id);
        if (!booking) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m" });
        }
        const oldStatus = booking.statusId;
        booking.statusId = statusId;
        await booking.save();

        // L·∫•y schedule li√™n quan
        const schedule = await db.Schedule.findOne({
            where: {
                doctorId: booking.doctorId,
                date: booking.date,
                timeType: booking.timeType
            }
        });

        // N·∫øu x√°c nh·∫≠n (S2) v√† tr∆∞·ªõc ƒë√≥ ch∆∞a x√°c nh·∫≠n th√¨ tƒÉng currentNumber
        if (statusId === 'S2' && oldStatus !== 'S2' && schedule) {
            schedule.currentNumber += 1;
            await schedule.save();
        }
        // N·∫øu h·ªßy (S3) v√† tr∆∞·ªõc ƒë√≥ l√† ƒë√£ x√°c nh·∫≠n th√¨ gi·∫£m currentNumber
        if (statusId === 'S3' && oldStatus === 'S2' && schedule && schedule.currentNumber > 0) {
            schedule.currentNumber -= 1;
            await schedule.save();
        }

        res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", data: booking });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error });
    }
};
